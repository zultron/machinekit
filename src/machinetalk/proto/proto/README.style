use this:


message MessageA {
}
message MessageB {
}
message TheOneAndOnlyMessage {
  enum MessageType {
    TYPE_UNKNOWN = 0;
    TYPE_A = 1;
    TYEP_B = 2;
  }
  optional MessageType type = 1;
  optional MessageA a = 2;
  optional MessageB b = 3;
  ...
}

Integer values:
Use enum types instead of manifest int constants if possible. They will result in better readable output when using TextFormat.


Suggested types:

// double
// bool
// string
// bytes

// efficient variable size-encoded ints
// sint32
// sint64

// uint32
// uint64

// For messages which go to/come from RT components, use the following
// nanopb options to simplify/speed up handling:

// for strings, give a maximum size like so:
// required string name = 1 [(nanopb).max_size = 41];
// NB: #define HAL_NAME_LEN     41	/* length for pin, signal, etc, names */

// for repeated fields, give a maximum repeat count like so:
// repeated PhoneNumber phone = 4 [(nanopb).max_count = 5];

// using default values:

//  required MsgLevel msglevel = 10 [default = RTAPI_MSG_DBG];
//  required string format = 20  [default = "*** uninitialized ***"];

// nanopb programming hint - to set default values:
//
// > are only relevant for pb_decode()/ pb_decode_noinit(), or is there
// > some static initializer I can use on a fresh message before encode?

// Only for pb_decode(). But there is a trick that you can use: make an
// input stream with length 0 and decode it. It will initialize the message
// to default values.


 * New notion "import public" that allows a proto file to forward the content
    it imports to its importers. For example,
      // foo.proto
      import public "bar.proto";
      import "baz.proto";

      // qux.proto
      import "foo.proto";
      // Stuff defined in bar.proto may be used in this file, but stuff from
      // baz.proto may NOT be used without importing it explicitly.
    This is useful for moving proto files. To move a proto file, just leave
    a single "import public" in the old proto file.