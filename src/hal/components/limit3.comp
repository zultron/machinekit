component limit3 "Limit the output signal to fall between min and max, limit its slew rate to less than maxv per second, and limit its second derivative to less than maxa per second squared.  When the signal is a position, this means that the position, velocity, and acceleration are limited.";
pin in float in;
pin out float out;
pin in bit load "When TRUE, immediately set \\fBout\\fB to \\fBin\\fR, ignoring maxv and maxa";
pin in float min=-1e20;
pin in float max=1e20;
pin in float maxv=1e20;
pin in float maxa=1e20;
variable double in_pos_old;
variable double out_vel_old;
function _;
license "GPL";
;;

#include "rtapi_math.h"

#define SET_NEXT_STATE(out_pos, out_vel, in_pos)	\
    do {						\
	out = out_pos;					\
	out_vel_old = out_vel;				\
	in_pos_old = in_pos;				\
	return;						\
    } while (0)

#define VALID_NEXT(pos, vel) ((pos) <= max_pos && (pos) >= min_pos	\
			      && (vel) <= max_vel && (vel) >= min_vel)

FUNCTION(_) {
    double in_pos_lim, dt, in_vel, min_vel, max_vel, min_pos, max_pos;
    double vel_0_time, vel_0_pos;
    double vel_match_time, vel_match_in_pos, vel_match_out_pos;
    int out_dir, out_dir_rel;

    if (load) {
	// Apply first order limit
	in_pos_lim = fmin(max, fmax(min, in));
	SET_NEXT_STATE(in_pos_lim, 0, in_pos_lim);
	return;
    }

    // Time increment per update
    dt = period * 1e-9;
    // Input velocity
    in_vel = (in - in_pos_old) / dt;
    // Most negative/positive velocity reachable in one period
    min_vel = fmax(out_vel_old - maxa * dt, -maxv);
    max_vel = fmin(out_vel_old + maxa * dt, maxv);
    // Most negative/positive position reachable in one period
    min_pos = out + min_vel * dt;
    max_pos = out + max_vel * dt;

    // Direction (sign) of output movement
    out_dir = (out_vel_old < 0) ? -1 : 1;
    // Direction of output movement relative to input movement
    out_dir_rel = (out_vel_old - in_vel < 0) ? -1 : 1;

    // Respect max/min position limits:  stop at limit line
    vel_0_time = fabs(out_vel_old/maxa);              // min time to decel to stop
    vel_0_pos = out                                   // position after stop
	+ out_vel_old * (vel_0_time+dt)
	+ 0.5 * (-out_dir * maxa) * pow(vel_0_time,2);

    // Follow input signal:  match position and velocity
    // - min time for velocity match
    vel_match_time = fabs(out_vel_old-in_vel) / maxa;
    // - input position after velocity match
    vel_match_in_pos = in + in_vel * vel_match_time;
    // - output position after velocity match
    vel_match_out_pos = out
	+ out_vel_old * (vel_match_time+dt)
	+ 0.5 * (-out_dir_rel * maxa) * pow(vel_match_time,2);

    // Respect max/min position limits
    // 
    // - If not at the limit line but in danger of overshooting it,
    //   slow down
    if (vel_0_pos >= max && !VALID_NEXT(max,0))       // can't follow max limit
	SET_NEXT_STATE(min_pos, min_vel, in);
    if (vel_0_pos <= min && !VALID_NEXT(min,0))       // can't follow min limit
	SET_NEXT_STATE(max_pos, max_vel, in);
    // - If input signal is headed out of bounds, or headed in bounds
    //   but no danger of overshooting, the limit is the goal
    if ((vel_match_in_pos <= min)                     // Input below min limit
	|| (in <= min && vel_match_in_pos < vel_match_out_pos)) {
	if (VALID_NEXT(min,0))
	    SET_NEXT_STATE(min, 0, in);               // - Park at min limit
	else
	    SET_NEXT_STATE(min_pos, min_vel, in);     // - Head toward min limit
    }
    if ((vel_match_in_pos >= max)                     // Input above max limit
	|| (in >= max && vel_match_in_pos > vel_match_out_pos)) {
	if (VALID_NEXT(max,0))
	    SET_NEXT_STATE(max, 0, in);               // - Park at max limit
	else
	    SET_NEXT_STATE(max_pos, max_vel, in);     // - Head toward min limit
    }

    // Follow input signal
    //
    // - Try to track input
    if (VALID_NEXT(in, in_vel))
	SET_NEXT_STATE(in, in_vel, in);
    // - Try to match position and velocity without overshooting
    if (out > in) {                                   // Output > input:
	if (vel_match_in_pos < vel_match_out_pos)     // - Not overshooting
	    SET_NEXT_STATE(min_pos, min_vel, in);     //   - Move closer
	else                                          // - Overshooting
	    SET_NEXT_STATE(max_pos, max_vel, in);     //   - Back off
    }
    if (out < in) {                                   // Output < input
	if (vel_match_in_pos > vel_match_out_pos)     // - Not overshooting
	    SET_NEXT_STATE(max_pos, max_vel, in);     //   - Move closer
	else                                          // - Overshooting
	    SET_NEXT_STATE(min_pos, min_vel, in);     //   - Back off
    }

    // Shouldn't get here
    SET_NEXT_STATE((max_pos-min_pos)/2, (max_vel-min_vel)/2, in);
}
