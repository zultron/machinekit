INCLUDES += rtapi rtapi_export

# this covers the userpci and shmdrv directories too, in a bit cludgy way
../include/%.h: ./rtapi/%.h
	cp  $^ $@

../include/%.hh: ./rtapi/%.hh
	cp  $^ $@

../include/%.h: ./rtapi/shmdrv/%.h
	mkdir -p ../include/shmdrv
	cp  $^ $@


##########################################
# Separate sources hack
#
# ulapi.so needs sources to be built separately for each flavor.  The
# Makefile rules, and TOOBJS & friends, always build the same source
# file into the same object file.
#
# Hack around this by creating a symlink 'rtapi/<flavor>' that points
# back to the rtapi directory.  Then the same source can be referred
# to as 'rtapi/<flavor1>/foo.c' or 'rtapi/<flavor2>/foo.c', and thus
# be built into separate object files.

rtapi/$(threads)/%: rtapi/.flavor-$(threads)-link-create-stamp
	@:  # do nothing

rtapi/.flavor-$(threads)-link-create-stamp:
	ln -s . rtapi/$(threads)
	@touch $@



##########################################
# Clean up
modclean:  modclean-rtapi
modclean-rtapi:
	for flav in $(BUILD_THREAD_FLAVORS); do \
	    rm -f rtapi/$$flav; \
	    rm -f rtapi/.flavor-$$flav-link-create-stamp; \
	    rm -f ../lib/ulapi-$$flav.so; \
	    rm -f ../libexec/rtapi_app_$$flav; \
	done
.PHONY:  modclean-rtapi


##########################################
# defaults for all thread styles

# Sources/objects included in both RTAPI and ULAPI, both kbuild and
# user threads
XXAPI_COMMON_SRCS := \
	rtapi_support.c \
	rtapi_hexdump.c \
	rtapi_common.c \
	rtapi_task.c \
	rtapi_shmem.c \
	rtapi_time.c \
	rtapi_exception.c \
	rtapi_heap.c \
	$(THREADS_SOURCE).c

# rtapi_compat needs to know where rtapi.ini lives
%/rtapi_compat.o:  \
	EXTRAFLAGS += -DEMC2_SYSTEM_CONFIG_DIR=\"$(EMC2_SYSTEM_CONFIG_DIR)\"
%/rtapi_compat.o:  \
	EXTRA_CFLAGS += -DEMC2_SYSTEM_CONFIG_DIR=\"$(EMC2_SYSTEM_CONFIG_DIR)\"

# ULAPI:  ../lib/ulapi$THREADSTYLE.so (TBD)
#
# List of sources whose objects objects/rtapi/*.o link into
# ../lib/ulapi$THREADSTYLE.soiblinuxcnchal.so;
#
ULAPI_SRCS := \
	$(patsubst %,rtapi/$(threads)/%,$(XXAPI_COMMON_SRCS)) \
	rtapi/$(threads)/ulapi_main.c
ifeq ($(BUILD_SYS),kbuild)
ULAPI_SRCS += rtapi/$(threads)/rtapi_module.c
else
# only userland ulapi.so modules need links to the RT libs
ULAPISO_RT_LDFLAGS = $(RT_LDFLAGS)
endif

# resolved at loadtime
$(call TOOBJSDEPS, $(ULAPI_SRCS)): EXTRAFLAGS += \
	$(THREADS_RTFLAGS) -fPIC

ULAPISO := ../rtlib/ulapi-$(threads).so

$(ULAPISO): ../lib/liblinuxcnchal.so ../lib/liblinuxcncshm.so \
		$(call TOOBJS, $(ULAPI_SRCS))
	$(ECHO) Creating shared object $(notdir $@)
	@mkdir -p ../rtlib
	@rm -f $@
	$(Q)$(CC) $(LDFLAGS)  -Wl,-soname,$(notdir $@) -shared \
	    -o $@ $^ $(ULAPISO_LIBS) $(ULAPISO_RT_LDFLAGS) \
	../lib/liblinuxcncshm.so \
	../lib/liblinuxcnchal.so

# Plumb in the ulapi-<flavor>.so build during 2nd-level recursive make
# modules run
ifeq ($(BUILD_THREAD_MODULES),yes)
USERSRCS += $(ULAPI_SRCS)
modules: $(ULAPISO)
endif

##################################################################
#                 The ulapi autoload library
#
# provides ULAPI with loading-on-first-reference of RTAPI methods
##################################################################

ULAPI_AUTOLOAD_SRCS := \
	rtapi/ulapi_autoload.c \
	rtapi/rtapi_compat.c \
	rtapi/rtapi_hexdump.c \
	rtapi/rtapi_support.c

USERSRCS += $(ULAPI_AUTOLOAD_SRCS)

ULAPI_AUTOLOAD_LIB := ../lib/liblinuxcnculapi.so

$(call TOOBJSDEPS, $(ULAPI_AUTOLOAD_SRCS)): EXTRAFLAGS += -DULAPI -fPIC

$(ULAPI_AUTOLOAD_LIB).0: $(call TOOBJS, $(ULAPI_AUTOLOAD_SRCS)) \
	../lib/liblinuxcncini.so \
	../lib/liblinuxcncshm.so
	$(ECHO) Creating shared library $(notdir $@)
	@mkdir -p ../lib
	@rm -f $@
	$(Q)$(CC) $(LDFLAGS) -Wl,-rpath,$(EMC2_RTLIB_DIR) \
	    -Wl,-soname,$(notdir $@) -shared \
	    -o $@ $^ -ldl $(RT_LDFLAGS)

TARGETS += $(ULAPI_AUTOLOAD_LIB) $(ULAPI_AUTOLOAD_LIB).0

##################################################################
#                 rtapi_app - now all thread styles
##################################################################
# rtapi_app_<flavor>
#
# A matching rtapi_app_<flavor> is built for each userland thread
# flavor at the same time as RTAPI module flavor builds.
#
# rtapi_app_<flavor> requires two sources plus one already in
# ulapi.so.

RTAPI_APP_SRCS := \
	rtapi/$(threads)/rtapi_app.cc \
	rtapi/$(threads)/rtapi_compat.c \
	rtapi/$(threads)/rtapi_hexdump.c \
	rtapi/$(threads)/rtapi_support.c

USERSRCS += $(RTAPI_APP_SRCS)

# RIP builds need to add LIB_DIR as an rpath, since LD_LIBRARY_PATH
# isn't honored for setuid executables.
ifeq ($(RUN_IN_PLACE),yes)
RTAPI_APP_RPATH=-Wl,-rpath,$(LIB_DIR)
endif

$(call TOOBJSDEPS, rtapi/$(threads)/rtapi_app.cc): EXTRAFLAGS = \
	$(PROTOBUF_CFLAGS) $(CZMQ_CFLAGS)

../libexec/rtapi_app_$(threads): \
	$(call TOOBJS, $(RTAPI_APP_SRCS)) \
	../lib/liblinuxcncini.so.0 \
	../lib/liblinuxcncshm.so \
	../lib/libmtalk.so.0 \
	../lib/liblinuxcnc-pb2++.so.0
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CXX) -Wl,-rpath,$(EMC2_RTLIB_DIR) $(RTAPI_APP_RPATH) \
	    -o $@ $^ \
	    $(PROTOBUF_LIBS) $(CZMQ_LIBS) -lstdc++ -ldl -luuid

#	$(LIBBACKTRACE) # already linked into libmtalk

modules:  ../libexec/rtapi_app_$(threads)
##################################################################
#                 USERLAND THREAD STYLES
##################################################################
ifeq ($(BUILD_SYS),user-dso)
# Build only during real module build, i.e. when 'make modules
# threads=<flavor>'
ifeq ($(BUILD_THREAD_MODULES),yes)

# the rtapi.so module
obj-$(CONFIG_RTAPI) += rtapi.o

rtapi-objs := \
	$(patsubst %.c,rtapi/%.o,$(XXAPI_COMMON_SRCS)) \
	rtapi/rtapi_main.o \
	rtapi/rtapi_compat.o



ifeq ($(USERMODE_PCI),yes)

# compile userland PCI support with udev cflags if any
$(call TOOBJSDEPS, rtapi/rtapi_pci.c): EXTRAFLAGS += $(LIBUDEV_CFLAGS)

# link in userland PCI support into rtapi.so
rtapi-objs += rtapi/rtapi_pci.o

# userland PCI support needs -ludev for rtapi.so
$(RTLIBDIR)/rtapi$(MODULE_EXT): EXTRA_LDFLAGS += $(LIBUDEV_LIBS)
endif

$(RTLIBDIR)/rtapi$(MODULE_EXT): EXTRA_LDFLAGS += $(RT_LDFLAGS)

# rule for kernel module, moved from src/Makefile
$(RTLIBDIR)/rtapi$(MODULE_EXT): $(addprefix $(OBJDIR)/,$(rtapi-objs))


endif # BUILD_THREAD_MODULES


##################################################################
#                     KERNEL THREAD STYLES
##################################################################
else  # BUILD_SYS == kbuild

obj-$(CONFIG_RTAPI) += rtapi.o

rtapi-objs := \
	$(patsubst %.c,rtapi/%.o,$(XXAPI_COMMON_SRCS)) \
	rtapi/rtapi_module.o

# rule for kernel module, moved from src/Makefile
$(RTLIBDIR)/rtapi$(MODULE_EXT): $(addprefix $(OBJDIR)/,$(rtapi-objs))

endif  # BUILD_SYS == kbuild

##################################################################
#                     the kdetect test program
##################################################################
RTAPI_KDETECT_SRCS =  rtapi/rtapi_kdetect.c
USERSRCS += $(RTAPI_KDETECT_SRCS)
RTAPI_KDETECT_OBJS := \
	$(call TOOBJS, $(RTAPI_KDETECT_SRCS))

$(call TOOBJSDEPS, $(RTAPI_KDETECT_SRCS)): \
	EXTRAFLAGS += -DTEST

# Build target
../libexec/kdetect: $(RTAPI_KDETECT_OBJS)  ../lib/liblinuxcnchal.so
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ -lrt -ldl

TARGETS += ../libexec/kdetect

##################################################################
#                     the rtapi message demon
##################################################################

RTAPI_MSGD_SRCS =  \
	rtapi/rtapi_msgd.cc \
	rtapi/rtapi_heap.c \
	rtapi/rtapi_compat.c

RTAPI_MSGD_OBJS := $(call TOOBJS, $(RTAPI_MSGD_SRCS))

RTAPI_MSGD_CFLAGS := \
	$(PROTOBUF_CFLAGS) $(CZMQ_CFLAGS) $(AVAHI_CFLAGS)

RTAPI_MSGD_LDFLAGS := \
	$(PROTOBUF_LIBS) $(CZMQ_LIBS) $(AVAHI_LIBS) \
	-lstdc++ -ldl -luuid

#	$(LIBBACKTRACE) # already linked into libmtalk

$(call TOOBJSDEPS, $(RTAPI_MSGD_SRCS)): \
	EXTRAFLAGS +=  $(RTAPI_MSGD_CFLAGS)

../libexec/rtapi_msgd: $(RTAPI_MSGD_OBJS) \
	../lib/liblinuxcncshm.so \
	../lib/liblinuxcncini.so \
	../lib/libmtalk.so.0 \
	../lib/liblinuxcnc-pb2++.so
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ $(RTAPI_MSGD_LDFLAGS) -lrt

USERSRCS += $(RTAPI_MSGD_SRCS)
TARGETS += ../libexec/rtapi_msgd

# lock debugging help plus a bit of API example
FLAVOR_SRCS =  rtapi/flavor.c rtapi/rtapi_compat.c

../libexec/flavor: $(call TOOBJS, $(FLAVOR_SRCS)) \
		../lib/liblinuxcncshm.so ../lib/liblinuxcncini.so
	$(ECHO) Linking $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC)  $(LDFLAGS) -o $@ $^ -lrt

USERSRCS += $(FLAVOR_SRCS)
TARGETS += ../libexec/flavor

##################################################################
#                     rtapi_masterd python lib
##################################################################

RTAPI_GLOBAL_BINDINGS_SO_CSRCS = rtapi/rtapi_global_bindings.c
RTAPI_GLOBAL_BINDINGS_SO_SRCS = \
	rtapi/rtapi_heap.c \
	$(RTAPI_GLOBAL_BINDINGS_SO_CSRCS)

$(call TOOBJSDEPS, $(RTAPI_GLOBAL_BINDINGS_SO_SRCS)) : \
	EXTRAFLAGS=-fPIC
$(call TOOBJSDEPS, $(RTAPI_GLOBAL_BINDINGS_SO_SRCS)) : \
	rtapi/Submakefile
USERSRCS += $(RTAPI_GLOBAL_BINDINGS_SO_SRCS)

$(RTAPI_GLOBAL_BINDINGS_SO_CSRCS): %.c: %.pyx \
		rtapi/rtapi_global.pxd \
		rtapi/cython_helpers.pxd \
		rtapi/rtapi.pxd \
		rtapi/ring.pxd \
		rtapi/rtapi_int.pxd \
		rtapi/mk_config.pxd \
		rtapi/Submakefile
	$(ECHO) Cythonizing $(notdir $@)
	$(Q)$(CYTHON) -I rtapi -I rtapi/shmdrv -o $@ $<

RTAPI_GLOBAL_BINDINGS_SO_OBJS = $(call TOOBJS, $(RTAPI_GLOBAL_BINDINGS_SO_SRCS))

../lib/python/machinekit/rtapi/rtapi_global_bindings.so: $(RTAPI_GLOBAL_BINDINGS_SO_OBJS)
	$(ECHO) Linking python module $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC) -g  -shared -o $@ $^ $(LDFLAGS) -luuid

CYTHON_TARGETS += ../lib/python/machinekit/rtapi/rtapi_global_bindings.so




RTAPI_COMMON_SO_CSRCS = rtapi/rtapi_common.c
RTAPI_COMMON_SO_SRCS = \
	$(RTAPI_COMMON_SO_CSRCS)

$(call TOOBJSDEPS, $(RTAPI_COMMON_SO_SRCS)) : \
	EXTRAFLAGS=-fPIC
$(call TOOBJSDEPS, $(RTAPI_COMMON_SO_SRCS)) : \
	rtapi/Submakefile
USERSRCS += $(RTAPI_COMMON_SO_SRCS)

$(RTAPI_COMMON_SO_CSRCS): %.c: %.pyx %.pxd \
		rtapi/Submakefile
	$(ECHO) Cythonizing $(notdir $@)
	$(Q)$(CYTHON) -I rtapi -o $@ $<

RTAPI_COMMON_SO_OBJS = $(call TOOBJS, $(RTAPI_COMMON_SO_SRCS))

../lib/python/machinekit/rtapi/rtapi_common.so: $(RTAPI_COMMON_SO_OBJS)
	$(ECHO) Linking python module $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC) -g  -shared -o $@ $^ $(LDFLAGS)

CYTHON_TARGETS += ../lib/python/machinekit/rtapi/rtapi_common.so

RTAPI_HEAP_BINDINGS_SO_CSRCS = rtapi/rtapi_heap_bindings.c
RTAPI_HEAP_BINDINGS_SO_SRCS = \
	rtapi/rtapi_heap.c \
	$(RTAPI_HEAP_BINDINGS_SO_CSRCS)

$(call TOOBJSDEPS, $(RTAPI_HEAP_BINDINGS_SO_SRCS)) : \
	EXTRAFLAGS=-fPIC
$(call TOOBJSDEPS, $(RTAPI_HEAP_BINDINGS_SO_SRCS)) : \
	rtapi/Submakefile
USERSRCS += $(RTAPI_HEAP_BINDINGS_SO_SRCS)

$(RTAPI_HEAP_BINDINGS_SO_CSRCS): %.c: %.pyx \
		rtapi/rtapi_heap.pxd \
		rtapi/cython_helpers.pxd \
		rtapi/Submakefile
	$(ECHO) Cythonizing $(notdir $@)
	$(Q)$(CYTHON) -I rtapi -o $@ $<

RTAPI_HEAP_BINDINGS_SO_OBJS = $(call TOOBJS, $(RTAPI_HEAP_BINDINGS_SO_SRCS))

../lib/python/machinekit/rtapi/rtapi_heap_bindings.so: $(RTAPI_HEAP_BINDINGS_SO_OBJS)
	$(ECHO) Linking python module $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC) -g  -shared -o $@ $^ $(LDFLAGS)

CYTHON_TARGETS += ../lib/python/machinekit/rtapi/rtapi_heap_bindings.so




# MK_CONFIG_SO_CSRCS = rtapi/mk_config.c
# MK_CONFIG_SO_SRCS = \
# 	$(MK_CONFIG_SO_CSRCS)

# $(call TOOBJSDEPS, $(MK_CONFIG_SO_SRCS)) : \
# 	EXTRAFLAGS=-fPIC
# $(call TOOBJSDEPS, $(MK_CONFIG_SO_SRCS)) : \
# 	rtapi/Submakefile
# USERSRCS += $(MK_CONFIG_SO_SRCS)

# $(MK_CONFIG_SO_CSRCS): %.c: %.pyx %.pxd \
# 		rtapi/Submakefile
# 	$(ECHO) Cythonizing $(notdir $@)
# 	$(Q)$(CYTHON) -I rtapi -I . -o $@ $<

# MK_CONFIG_SO_OBJS = $(call TOOBJS, $(MK_CONFIG_SO_SRCS))

# ../lib/python/machinekit/mk_config.so: $(MK_CONFIG_SO_OBJS)
# 	$(ECHO) Linking python module $(notdir $@)
# 	@mkdir -p $(dir $@)
# 	$(Q)$(CC) -g  -shared -o $@ $^ $(LDFLAGS)

# CYTHON_TARGETS += ../lib/python/machinekit/mk_config.so

##################################################################
#                     rtapi.ini config file
##################################################################

../etc/linuxcnc/rtapi.ini: ../scripts/gen-rtapi.ini.sh
	@mkdir -p $(dir $@)
	bash $< > $@
TARGETS += ../etc/linuxcnc/rtapi.ini



##################################################################
#                     parameter server
##################################################################

# Start with some macros

MACHINEKIT_PY_DIR = ../lib/python/machinekit

# PROTO_TO_NPB_C/H:  generate .proto -> .npb.c file mappings
#   usage:  $(call PROTO_TO_NPB_C, sources.proto ...)
PROTO_TO_NPB_C = $(patsubst %.proto, generated/%.npb.c, $(1))
PROTO_TO_NPB_H = $(patsubst %.proto, generated/%.npb.h, $(1))
PROTO_TO_NPB_CH = $(patsubst %.proto, generated/%.npb.c generated/%.npb.h, $(1))
PROTO_TO_PB_PY = $(patsubst %.proto, $(MACHINEKIT_PY_DIR)/%_pb2.py, $(1))

# NPB_DEPS:  generate .proto -> .npb.[ch] -> .npb.o deps
#     $(eval $(call NANOPBDEPS sources.proto ...))
# Depends on NANOPB_SUPPORT from machinetalk/Submakefile
define PB_DEPS
NPB_EXTRA_DEPS = $(wildcard $(patsubst %.proto,%.options,$(PARAMETER_PROTO))) \
	$(NANOPB_SUPPORT)
$$(call PROTO_TO_NPB_C, $(1)): generated/%.npb.c: %.proto $$(NPB_EXTRA_DEPS)
$$(call PROTO_TO_NPB_H, $(1)): generated/%.npb.h: %.proto $$(NPB_EXTRA_DEPS)
$$(call PROTO_TO_PB_PY, $(1)): $(MACHINEKIT_PY_DIR)/%_pb2.py: %.proto
USERSRCS += $$(call PROTO_TO_NPB_C, $(1))
PYTARGETS += $$(call PROTO_TO_PB_PY, $(1))

endef


PARAMETER_PROTO = rtapi/config/parameter.proto
PARAMETER_C_SRCS = rtapi/config/parameter.c
# Set up nanopb, py deps
$(eval $(call PB_DEPS, $(PARAMETER_PROTO)))

# ----------- Nanopb c/h rules
#
# Nanopb: generate *.npb.{c,h} from proto files
# these depend on npb options

# Nanopb parameter protocol
$(call PROTO_TO_NPB_CH, $(PARAMETER_PROTO)):
	$(ECHO) "protoc create $@ from $<"
	@mkdir -p $(dir $@)
	$(Q)$(PROTOC) $(PROTOC_FLAGS) \
	--plugin=protoc-gen-nanopb=../lib/python/protoc-gen-nanopb \
	--nanopb_out="--extension=.npb:generated" \
	$<

PARAMETER_NPB_C_SRCS = $(call PROTO_TO_NPB_C, $(PARAMETER_PROTO))
PARAMETER_NPB_LIB_SRCS = $(NANOPB_C_SRCS) $(PARAMETER_NPB_C_SRCS) \
		$(PARAMETER_C_SRCS) \
		rtapi/rtapi_heap.c

USERSRCS += $(PARAMETER_C_SRCS)

PARAMETER_NPB_CFLAGS := -DPB_FIELD_32BIT \
#	'-DPB_SYSTEM_HEADER=<'$(MACHINETALK)'/include/pb-linuxcnc.h>'
$(call TOOBJSDEPS, $(PARAMETER_NPB_C_SRCS)) : \
	EXTRAFLAGS += $(PARAMETER_NPB_CFLAGS)
$(call TOOBJSDEPS, $(PARAMETER_C_SRCS)) : \
	EXTRAFLAGS += -Igenerated

PARAMETER_NPB_LIB := ../lib/libmkparameter-npb.so

$(PARAMETER_NPB_LIB).0: $(call TOOBJS, $(PARAMETER_NPB_LIB_SRCS))
	$(ECHO) Linking $(notdir $@)
	@mkdir -p ../lib
	@rm -f $@
	$(Q)$(CC) $(LDFLAGS) -Wl,-soname,$(notdir $@) -shared -o $@ $^


$(call PROTO_TO_PB_PY, $(PARAMETER_PROTO)):
	$(ECHO) "protoc create $@ from $<"
	@mkdir -p $(dir $@)
	$(Q)$(PROTOC) $(PROTOC_FLAGS) \
	--python_out=$(MACHINEKIT_PY_DIR) \
	$<

# FIXME

USERSRCS += parameter_test.c
parameter_test:  \
		$(call TOOBJS, $(PARAMETER_C_SRCS) \
			rtapi/rtapi_heap.c parameter_test.c) \
		../lib/liblinuxcncshm.so
	$(Q)$(CC) $(LDFLAGS) -o $@ -I. -Irtapi $^

RTAPI_CONFIG_PARAMETER_BINDINGS_SO_CSRCS = rtapi/config/parameter_bindings.c
RTAPI_CONFIG_PARAMETER_BINDINGS_SO_SRCS = \
	rtapi/config/parameter.c \
	rtapi/rtapi_heap.c \
	$(RTAPI_CONFIG_PARAMETER_BINDINGS_SO_CSRCS)

$(call TOOBJSDEPS, $(RTAPI_CONFIG_PARAMETER_BINDINGS_SO_SRCS)) : \
	EXTRAFLAGS=-fPIC
$(call TOOBJSDEPS, $(RTAPI_CONFIG_PARAMETER_BINDINGS_SO_SRCS)) : \
	rtapi/Submakefile
USERSRCS += $(RTAPI_CONFIG_PARAMETER_BINDINGS_SO_SRCS)

$(RTAPI_CONFIG_PARAMETER_BINDINGS_SO_CSRCS): %.c: %.pyx \
		rtapi/config/parameter.pxd \
		rtapi/cython_helpers.pxd \
		rtapi/Submakefile
	$(ECHO) Cythonizing $(notdir $@)
	$(Q)$(CYTHON) -I rtapi -o $@ $<

RTAPI_CONFIG_PARAMETER_BINDINGS_SO_OBJS = \
	$(call TOOBJS, $(RTAPI_CONFIG_PARAMETER_BINDINGS_SO_SRCS))

../lib/python/machinekit/rtapi/config/parameter_bindings.so: \
		$(RTAPI_CONFIG_PARAMETER_BINDINGS_SO_OBJS)
	$(ECHO) Linking python module $(notdir $@)
	@mkdir -p $(dir $@)
	$(Q)$(CC) -g  -shared -o $@ $^ $(LDFLAGS) -luuid

CYTHON_TARGETS += ../lib/python/machinekit/rtapi/config/parameter_bindings.so

